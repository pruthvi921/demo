# azure-pipelines.yaml
parameters:
  - name: environment
    type: string
    default: 'dev'
    values: [dev, staging, prod]

  - name: activeColor
    type: string
    default: 'blue'
    values: [blue, green]

trigger:
  branches:
    include: ['*']

pr:
  branches:
    include: [master]

variables:
  - template: variables.yaml
  - group: BackendSecrets
  
stages:
  - stage: Build
    displayName: 'Feature Branch Build + Scan + Test'
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/feature/'))
    jobs:
      - job: BuildScanTest
        pool: { vmImage: 'ubuntu-latest' }
        steps:
          - checkout: self
            clean: true

          - task: UsePythonVersion@0
            inputs: { versionSpec: '3.x' }

          - script: |
              pip install --upgrade pip bandit flake8 pylint
              bandit -r src/ -f json -o bandit-report.json
              flake8 src/ --output-file=flake8-report.txt
              pylint src/ > pylint-report.txt
            displayName: 'Run Code Scans'

          - script: |
              TAG=$(Build.SourceVersion:0:7)
              echo "##vso[task.setvariable variable=IMAGE_TAG]$TAG"
            displayName: 'Set Image Tag'

          - task: Docker@2
            displayName: 'Build Docker Image'
            inputs:
              command: build
              containerRegistry: $(DevACRServiceConnection)
              repository: $(IMAGE_NAME)
              dockerfile: backend-service/Dockerfile
              tags: $(IMAGE_TAG)

          - script: |
              docker run --rm $(DevACRName)/$(IMAGE_NAME):$(IMAGE_TAG) pytest src/test --junitxml=test-results.xml
            displayName: 'Run Unit Tests'

          - task: PublishTestResults@2
            inputs:
              testResultsFiles: '**/test-results.xml'
              testRunTitle: 'Pytest Results'

          - script: |
              trivy image --severity HIGH,CRITICAL --exit-code 1 $(DevACRName)/$(IMAGE_NAME):$(IMAGE_TAG) --format json --output trivy-report.json
            displayName: 'Run Trivy Scan'

          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: '$(Pipeline.Workspace)'
              artifact: 'security-reports'
              publishLocation: 'pipeline'

          - task: PowerShell@2
            displayName: 'send notification to teams'
            inputs:
              targetType: 'inline'
              script: |
                $message = "Build completed for feature branch. Security reports are available."
                Write-Host "##vso[task.setvariable variable=TEAMS_MESSAGE]$message"
                # Add your Teams notification logic here
                

  - stage: MasterDeployDev
    displayName: 'Master PR Merge: Build + Push + Deploy Dev'
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    jobs:
      - job: BuildPushDeployDev
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - checkout: self
            clean: true

          - script: |
              TAG=$(Build.SourceVersion:0:7)
              echo "##vso[task.setvariable variable=IMAGE_TAG]$TAG"
            displayName: 'Set Image Tag'

          - task: Docker@2
            displayName: 'Build and Push to Dev ACR'
            inputs:
              command: buildAndPush
              containerRegistry: $(DevACRServiceConnection)
              repository: $(IMAGE_NAME)
              dockerfile: backend-service/Dockerfile
              tags: $(IMAGE_TAG)
              buildContext: backend-service

      # Deploy Dev
      - template: deploy-stage-template.yaml
        parameters:
          environment: dev
          activeColor: ${{ parameters.activeColor }}

 
  - stage: ReleaseDeployStageProd
    displayName: 'Release Branch: Build + Push + Deploy Stage + Prod'
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/release/'))
    jobs:
      - job: BuildPush
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - checkout: self
            clean: true

          - script: |
              TAG=$(Build.SourceVersion:0:7)
              echo "##vso[task.setvariable variable=IMAGE_TAG]$TAG"
            displayName: 'Set Image Tag'

          - task: Docker@2
            displayName: 'Build and Push to Stage ACR'
            inputs:
              command: buildAndPush
              containerRegistry: $(StagingACRServiceConnection)
              repository: $(IMAGE_NAME)
              dockerfile: backend-service/Dockerfile
              tags: $(IMAGE_TAG)
              buildContext: backend-service

          - task: Docker@2
            displayName: 'Push to Prod ACR'
            inputs:
              command: push
              containerRegistry: $(ProdACRServiceConnection)
              repository: $(IMAGE_NAME)
              tags: $(IMAGE_TAG)

  - template: deploy-stage-template.yaml
    parameters:
      environment: staging
      activeColor: ${{ parameters.activeColor }}

  # Approval Before Switching Staging Traffic
  - stage: ApprovalSwitchStaging
    displayName: 'Approval Before Switching Staging Traffic'
    dependsOn: ReleaseDeployStageProd
    condition: succeeded()
    jobs:
      - job: WaitForApprovalStaging
        pool: server
        steps:
          - task: ManualValidation@0
            inputs:
              instructions: 'Please approve to switch traffic in Staging.'
              notifyUsers: '$(StagingApprovers)'


  - template: deploy-stage-template.yaml
    parameters:
      environment: prod
      activeColor: ${{ parameters.activeColor }}

  # Approval Before Switching Prod Traffic
  - stage: ApprovalSwitchProd
    displayName: 'Approval Before Switching Prod Traffic'
    dependsOn: Deploy_prod
    condition: succeeded()
    jobs:
      - job: WaitForApprovalProd
        pool: server
        steps:
          - task: ManualValidation@0
            inputs:
              instructions: 'Please approve to switch traffic in Prod.'
              notifyUsers: '$(ProdApprovers)'

  - stage: HotfixDeployProd
    displayName: 'Hotfix Branch: Build + Push + Deploy Prod'
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/hotfix/'))
    jobs:
      - job: BuildPushDeployProd
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - checkout: self
            clean: true

          - script: |
              TAG=$(Build.SourceVersion:0:7)
              echo "##vso[task.setvariable variable=IMAGE_TAG]$TAG"
            displayName: 'Set Image Tag'

          - task: Docker@2
            displayName: 'Build and Push to Prod ACR'
            inputs:
              command: buildAndPush
              containerRegistry: $(ProdACRServiceConnection)
              repository: $(IMAGE_NAME)
              dockerfile: backend-service/Dockerfile
              tags: $(IMAGE_TAG)
              buildContext: backend-service

      # Deploy Prod
      - template: deploy-stage-template.yaml
        parameters:
          environment: prod
          activeColor: ${{ parameters.activeColor }}
  # Approval Before Switching Prod Traffic
  - stage: ApprovalSwitchProdHotfix
    displayName: 'Approval Before Switching Prod Traffic for Hotfix'
    dependsOn: HotfixDeployProd
    condition: succeeded()
    jobs:
      - job: WaitForApprovalProdHotfix
        pool: server
        steps:
          - task: ManualValidation@0
            inputs:
              instructions: 'Please approve to switch traffic in Prod for hotfix.'
              notifyUsers: '$(ProdApprovers)'