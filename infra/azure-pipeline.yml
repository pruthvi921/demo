trigger: none

parameters:
  - name: environment
    displayName: 'Environment'
    type: string
    default: 'dev'
    values:
      - dev
      - staging
      - prod

variables:
  TF_VAR_environment: ${{ parameters.environment }}
  TF_STATE_KEY: '${{ parameters.environment }}.tfstate'
  TFVARS_FILE: 'environments/${{ parameters.environment }}.tfvars'
  TF_VERSION: '1.11.3'
  TF_WORKSPACE: ${{ parameters.environment }}

stages:
- stage: Validate
  jobs:
    - job: Validate
      pool:
        vmImage: 'ubuntu-latest'
      steps:
        - checkout: self

        - task: TerraformInstaller@1
          inputs:
            terraformVersion: $(TF_VERSION)

        - script: terraform --version
          displayName: 'Show Terraform Version'

        - script: |
            terraform init -backend-config="key=$(TF_STATE_KEY)"
          displayName: 'Terraform Init'

        - script: |
            terraform workspace select $(TF_WORKSPACE) || terraform workspace new $(TF_WORKSPACE)
          displayName: 'Select or Create Workspace'

        - script: terraform validate
          displayName: 'Terraform Validate'

        - script: terraform fmt -check
          displayName: 'Terraform Format Check'

- stage: Plan
  dependsOn: Validate
  jobs:
    - job: Plan
      pool:
        vmImage: 'ubuntu-latest'
      steps:
        - checkout: self

        - task: TerraformInstaller@1
          inputs:
            terraformVersion: $(TF_VERSION)

        - script: terraform init -backend-config="key=$(TF_STATE_KEY)"
          displayName: 'Terraform Init'

        - script: |
            terraform workspace select $(TF_WORKSPACE) || terraform workspace new $(TF_WORKSPACE)
          displayName: 'Select or Create Workspace'

        - script: terraform plan -var-file=$(TFVARS_FILE) -out=tfplan
          displayName: 'Terraform Plan'

        - publish: tfplan
          artifact: tfplan

- stage: ManualApproval
  displayName: 'Manual Approval (Prod/Staging only)'
  dependsOn: Plan
  condition: or(eq('${{ parameters.environment }}', 'prod'), eq('${{ parameters.environment }}', 'staging'))
  jobs:
    - job: Approval
      pool:
        vmImage: 'ubuntu-latest'
      steps:
        - task: ManualValidation@0
          inputs:
            notifyUsers: 'your-team@yourcompany.com'
            instructions: 'Approve to apply Terraform changes to ${{ parameters.environment }}.'

- stage: Apply
  dependsOn: [Plan, ManualApproval]
  condition: |
    or(
      eq('${{ parameters.environment }}', 'dev'),
      and(
        or(eq('${{ parameters.environment }}', 'prod'), eq('${{ parameters.environment }}', 'staging')),
        succeeded('ManualApproval')
      )
    )
  jobs:
    - job: Apply
      pool:
        vmImage: 'ubuntu-latest'
      steps:
        - checkout: self

        - task: TerraformInstaller@1
          inputs:
            terraformVersion: $(TF_VERSION)

        - script: terraform init -backend-config="key=$(TF_STATE_KEY)"
          displayName: 'Terraform Init'

        - script: |
            terraform workspace select $(TF_WORKSPACE) || terraform workspace new $(TF_WORKSPACE)
          displayName: 'Select or Create Workspace'

        - download: current
          artifact: tfplan

        - script: terraform apply -auto-approve tfplan
          displayName: 'Terraform Apply'
